/*
 * PAAS平台中央认证和授权系统
 * 更多信息请联系基础框架团队
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ppdai.pauth.client.api;

import com.ppdai.pauth.client.ApiClient;
import com.ppdai.pauth.client.ApiException;
import com.ppdai.pauth.client.Pair;
import com.ppdai.pauth.client.ApiCallback;
import com.ppdai.pauth.client.ApiResponse;
import com.ppdai.pauth.client.Configuration;
import com.ppdai.pauth.client.ProgressRequestBody;
import com.ppdai.pauth.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ppdai.pauth.client.model.AuthCodeVO;
import com.ppdai.pauth.client.model.ClientVO;
import com.ppdai.pauth.client.model.OAuth2AccessToken;
import com.ppdai.pauth.client.model.ValidityVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuth2EndpointApi {
    private ApiClient apiClient;

    public OAuth2EndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuth2EndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authorizeUsingPOST
     * @param clientVO clientVO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingPOSTCall(ClientVO clientVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientVO;
        
        // create path and map variables
        String localVarPath = "/oauth2/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingPOSTValidateBeforeCall(ClientVO clientVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientVO' is set
        if (clientVO == null) {
            throw new ApiException("Missing the required parameter 'clientVO' when calling authorizeUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingPOSTCall(clientVO, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OAuth2授权点
     * 授权点颁发authorization code
     * @param clientVO clientVO (required)
     * @return AuthCodeVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthCodeVO authorizeUsingPOST(ClientVO clientVO) throws ApiException {
        ApiResponse<AuthCodeVO> resp = authorizeUsingPOSTWithHttpInfo(clientVO);
        return resp.getData();
    }

    /**
     * OAuth2授权点
     * 授权点颁发authorization code
     * @param clientVO clientVO (required)
     * @return ApiResponse&lt;AuthCodeVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthCodeVO> authorizeUsingPOSTWithHttpInfo(ClientVO clientVO) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingPOSTValidateBeforeCall(clientVO, null, null);
        Type localVarReturnType = new TypeToken<AuthCodeVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth2授权点 (asynchronously)
     * 授权点颁发authorization code
     * @param clientVO clientVO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingPOSTAsync(ClientVO clientVO, final ApiCallback<AuthCodeVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingPOSTValidateBeforeCall(clientVO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthCodeVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for introspectTokenUsingPOST
     * @param token token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call introspectTokenUsingPOSTCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth2/introspect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call introspectTokenUsingPOSTValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling introspectTokenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = introspectTokenUsingPOSTCall(token, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OAuth2令牌检查点
     * 检查令牌
     * @param token token (required)
     * @return ValidityVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidityVO introspectTokenUsingPOST(String token) throws ApiException {
        ApiResponse<ValidityVO> resp = introspectTokenUsingPOSTWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * OAuth2令牌检查点
     * 检查令牌
     * @param token token (required)
     * @return ApiResponse&lt;ValidityVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidityVO> introspectTokenUsingPOSTWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = introspectTokenUsingPOSTValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<ValidityVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth2令牌检查点 (asynchronously)
     * 检查令牌
     * @param token token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call introspectTokenUsingPOSTAsync(String token, final ApiCallback<ValidityVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = introspectTokenUsingPOSTValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidityVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for issueTokenUsingPOST
     * @param grantType grant_type (required)
     * @param authorization Authorization (optional)
     * @param code code (optional)
     * @param redirectUri redirect_uri (optional)
     * @param refreshToken refresh_token (optional)
     * @param username username (optional)
     * @param password password (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call issueTokenUsingPOSTCall(String grantType, String authorization, String code, String redirectUri, String refreshToken, String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (grantType != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "grant_type", grantType));
        }
        if (code != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "code", code));
        }
        if (redirectUri != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "redirect_uri", redirectUri));
        }
        if (refreshToken != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "refresh_token", refreshToken));
        }
        if (username != null) {
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "username", username));
        }
        if (password != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "password", password));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call issueTokenUsingPOSTValidateBeforeCall(String grantType, String authorization, String code, String redirectUri, String refreshToken, String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling issueTokenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = issueTokenUsingPOSTCall(grantType, authorization, code, redirectUri, refreshToken, username, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OAuth2令牌颁发点
     * 颁发令牌access/refresh token
     * @param grantType grant_type (required)
     * @param authorization Authorization (optional)
     * @param code code (optional)
     * @param redirectUri redirect_uri (optional)
     * @param refreshToken refresh_token (optional)
     * @param username username (optional)
     * @param password password (optional)
     * @return OAuth2AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OAuth2AccessToken issueTokenUsingPOST(String grantType, String authorization, String code, String redirectUri, String refreshToken, String username, String password) throws ApiException {
        ApiResponse<OAuth2AccessToken> resp = issueTokenUsingPOSTWithHttpInfo(grantType, authorization, code, redirectUri, refreshToken, username, password);
        return resp.getData();
    }

    /**
     * OAuth2令牌颁发点
     * 颁发令牌access/refresh token
     * @param grantType grant_type (required)
     * @param authorization Authorization (optional)
     * @param code code (optional)
     * @param redirectUri redirect_uri (optional)
     * @param refreshToken refresh_token (optional)
     * @param username username (optional)
     * @param password password (optional)
     * @return ApiResponse&lt;OAuth2AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OAuth2AccessToken> issueTokenUsingPOSTWithHttpInfo(String grantType, String authorization, String code, String redirectUri, String refreshToken, String username, String password) throws ApiException {
        com.squareup.okhttp.Call call = issueTokenUsingPOSTValidateBeforeCall(grantType, authorization, code, redirectUri, refreshToken, username, password, null, null);
        Type localVarReturnType = new TypeToken<OAuth2AccessToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth2令牌颁发点 (asynchronously)
     * 颁发令牌access/refresh token
     * @param grantType grant_type (required)
     * @param authorization Authorization (optional)
     * @param code code (optional)
     * @param redirectUri redirect_uri (optional)
     * @param refreshToken refresh_token (optional)
     * @param username username (optional)
     * @param password password (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call issueTokenUsingPOSTAsync(String grantType, String authorization, String code, String redirectUri, String refreshToken, String username, String password, final ApiCallback<OAuth2AccessToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = issueTokenUsingPOSTValidateBeforeCall(grantType, authorization, code, redirectUri, refreshToken, username, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OAuth2AccessToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revokeTokenUsingPOST
     * @param token token (required)
     * @param authorization Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revokeTokenUsingPOSTCall(String token, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null){
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null){
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revokeTokenUsingPOSTValidateBeforeCall(String token, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling revokeTokenUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = revokeTokenUsingPOSTCall(token, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OAuth2令牌吊销点
     * 吊销令牌
     * @param token token (required)
     * @param authorization Authorization (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean revokeTokenUsingPOST(String token, String authorization) throws ApiException {
        ApiResponse<Boolean> resp = revokeTokenUsingPOSTWithHttpInfo(token, authorization);
        return resp.getData();
    }

    /**
     * OAuth2令牌吊销点
     * 吊销令牌
     * @param token token (required)
     * @param authorization Authorization (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> revokeTokenUsingPOSTWithHttpInfo(String token, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = revokeTokenUsingPOSTValidateBeforeCall(token, authorization, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OAuth2令牌吊销点 (asynchronously)
     * 吊销令牌
     * @param token token (required)
     * @param authorization Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revokeTokenUsingPOSTAsync(String token, String authorization, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revokeTokenUsingPOSTValidateBeforeCall(token, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
